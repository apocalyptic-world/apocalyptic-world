:: Car mini game - race 
<h1 class="ptitle"><<=$carRace.title>></h1>
<br />
<<set _choices = 6>>
<<set $carRace.correctChoice = randomInteger(0, (_choices - 1))>>
<div id="time-bar-container" style="width: 100%; height: 25px; background: #ddd; border-radius: 10px; margin: 10px auto; max-width: 400px;">
  <div id="time-bar" style="width: 100%; height: 100%; border-radius: 10px;"></div>
</div>

<div class="cars">
    <<for _i to 0; _i < _choices; _i++>>
        <<if _i === $carRace.correctChoice>>
          <<set _url = "images/places/race_stadium/race_choice_correct.jpg">>
        <<else>>
          <<set _url = "images/places/race_stadium/race_choice" + (_i + 1) + ".jpg">>
        <</if>>
        
        <img @src="_url"
            style="width: 200px; height: 120px; margin: 10px; border-radius: 8px; cursor: pointer;"
            @data-index="_i"
            class="race-choice">
    <</for>>
</div>

<script>
function raceGame() {
  const maxTime = SugarCube.State.variables.carRace.timer;
  let timeLeft = maxTime;
  let blinking = false;
  const correctIndex = SugarCube.State.variables.carRace.correctChoice;
  const timeBar = document.getElementById("time-bar");

  const timer = setInterval(() => {
    timeLeft -= 0.05;
    const percent = Math.max((timeLeft / maxTime) * 100, 0);
    timeBar.style.width = percent + "%";

    const red = Math.min(255, Math.round((1 - timeLeft / maxTime) * 255));
    const green = Math.min(255, Math.round((timeLeft / maxTime) * 200));
    timeBar.style.backgroundColor = `rgb(${red}, ${green}, 50)`;

    if (percent <= 20 && !blinking) {
      blinking = true;
      timeBar.classList.add("blinking");
    }

    if (timeLeft <= 0) {
      clearInterval(timer);
      SugarCube.Engine.play(SugarCube.State.variables.carRace.passageLost);
    }
  }, 50);

  const images = document.querySelectorAll(".race-choice");
  images.forEach(img => {
    img.addEventListener("click", () => {
      clearInterval(timer);
      const index = parseInt(img.dataset.index);
      if (index === correctIndex) {
        SugarCube.State.variables.carRace.round++;
        if (SugarCube.State.variables.carRace.round > SugarCube.State.variables.carRace.totalRounds) {
          SugarCube.Engine.play(SugarCube.State.variables.carRace.passageWon);
        } else {
          SugarCube.State.variables.carRace.correctIndex = Math.floor(Math.random() * 4);
          SugarCube.Engine.play('Car mini game - race');
        }
      } else {
        SugarCube.Engine.play(SugarCube.State.variables.carRace.passageLost);
      }
    });
  });
};

raceGame();
</script>
<style>
  .cars {
    display: flex;
      justify-content: center;
      flex-wrap: wrap;
    }

    #time-bar {
        transition: width 0.05s linear;
    }

    #time-bar {
      transition: width 0.05s linear, background-color 0.1s linear;
    }

  .blinking {
    animation: blink 0.5s infinite alternate;
  }

  @keyframes blink {
    from { opacity: 1; }
    to { opacity: 0.4; }
  }
</style>