:: Bedrom - auto_morning  [automatization include]

/* a little automation if settings allow it */
<<set $automatization ??= {}>>
<<set _ruleAdd      = $automatization.add ?? false>>
<<set _ruleSubtract = $automatization.subtract ?? false>>
<<set _ruleJob      = $automatization.job ?? false>>
<<set _ruleDup      = $automatization.dup ?? false>>
<<set _ruleHunter   = $automatization.hunter ?? false>>
<<if _ruleAdd || _ruleSubtract || _ruleJob || _ruleDup || _ruleHunter>>
    <<set _outputAutoList ??= []>>
    <<set _isStorageAvailable = ($game.location.shop ?? false)>>
    <<set _npcs = $slaves.concat($guests)>> 
    <<set _want = {}>>
    <<set _companions = new Map()>>
    <<for _companionKey, _companion range $player.companions>>
        <<set _guestIndex = _companionKey.split(':')[1]>>
        <<set _guest = $guests[_guestIndex]>>
        <<set _npcId = _guest.id>>
        <<set _companions.set(_npcId, true)>>
    <</for>>
    <<set _outDupNpcs = []>>
    <<set _outMinusNpcs = []>>
    <<for _npcI, _npc range _npcs>>
        <<set _job = _companions.has(_npc.id) ? 'companion' : (_npc.assignedTo ?? 'none') >>

        /* duplicates go to backpack or storage, always on */
        <<set _outDupItems = []>>
        <<set _outMinusItems = []>>
        <<for _itemI, _item range setup.inventoryNpc>>
            <<set _itemcount = setup.npcInventoryCount(_npc, _item)>>
            <<if _itemcount > 1>>
                <<run _itemcount-->>
                <<run setup.cabinInventory.from_npc(_npc, _item, _itemcount)>>
                <<set _outDupItems.push(_item + ': ' + _itemcount)>>
                <<set _itemcount = 1>>
            <</if>>

            <<if setup.automatization.job_tools[_job].includes(_item) && _itemcount == 0>>
                <<if _ruleAdd || _ruleSubtract || _ruleJob || _ruleHunter>>
                    <<set _want[_item] ??= []>>
                    <<set _want[_item].push(_npc)>>
                <</if>>
            <<elseif !setup.automatization.job_tools[_job].includes(_item) && _itemcount > 0>>
                <<if _ruleSubtract || _ruleJob || _ruleHunter>>
                    <<run setup.cabinInventory.from_npc(_npc, _item, _itemcount)>>
                    <<set _outMinusItems.push(_item + ': ' + _itemcount)>>
                <</if>>
            <</if>>
        <</for>>
        <<if _outDupItems.length > 0>>
            <<set _outDupNpcs.push(_npc.name + ' (' + _outDupItems.sort().join(', ') + ')')>>
        <</if>>
        <<if _outMinusItems.length > 0>>
            <<set _outMinusNpcs.push(_npc.name + ' (' + _outMinusItems.sort().join(', ') + ')')>>
        <</if>>
    <</for>>
    <<if _outDupNpcs.length > 0>>
        <<set  _outputAutoList.push('No extras - npc → cabin: ' + _outDupNpcs.sort().join('; ') + ';')>>
    <</if>>
    <<if _outMinusNpcs.length > 0>>
        <<set _outputAutoList.push('Subtract - npc → cabin: ' + _outMinusNpcs.sort().join('; ')+ ';')>>
    <</if>>
    <<unset _outDupItems, _outDupNpcs, _outMinusItems, _outMinusNpcs, _npcI, _npc, _npcs, _itemI, _item, _itemcount>>

    /* using pop so guests gets first ;-) */

    /* add */
    <<for _item, _npcs  range _want>>
        <<set _outItem = []>>
        <<for _npcs.length > 0 && setup.cabinInventory.has(_item, 2)>>
            <<set _npc = _npcs.pop()>>
            <<run setup.cabinInventory.to_npc(_npc, _item)>>
            <<set _outItem.push(_npc.name)>>
        <</for>>
        <<if _outItem.length > 0>>
            <<set _outputAutoList.push('Add ' + _item + ' npc ← cabin: ' + _outItem.sort().join(', ') + ';')>>
        <</if>>
        <<if _want[_item].length > 0>>
            <<set _outNo = []>>
            <<for _npc range _want[_item]>>
                <<set _outNo.push(_npc.name)>>
            <</for>>
            <<set _outputAutoList.push('Add failed - no ' + _item + ': ' + _outNo.sort().join(', ') + ';')>>
        <</if>>
    <</for>>

    <<if _ruleHunter>>
        <<set _item = 'axe'>>
        <<set _outItem = []>>
        <<set _want.bow ??= []>>
        <<for _want.bow.length > 0 && setup.cabinInventory.has(_item, 2)>>
            <<set _npc = _want.bow.pop()>>
            <<run setup.cabinInventory.to_npc(_npc, _item)>>
            <<set _outItem.push(_npc.name)>>
        <</for>>
        <<if _outItem.length > 0>>
            <<set _outputAutoList.push('Hunter ' + _item + ' npc ← cabin: ' + _outItem.sort().join(', ') + ';')>>
        <</if>>
        <<if _want.bow.length > 0>>
            <<set _outNo = []>>
            <<for _npc range _want.bow>>
                <<set _outNo.push(_npc.name)>>
            <</for>>
            <<set _outputAutoList.push('Hunter failed - no ' + _item + ': ' + _outNo.sort().join(', ') + ';')>>
        <</if>>
    <</if>>
    <<unset _npc, _want, _outNo>>

    /* MC */
    <<if _isStorageAvailable>>
        <<set _outItem = []>>
        <<for _item range setup.automatization.job_tools.mc.sort()>>
            <<if !$backpack.has(_item) && $storage.has(_item)>>
                <<transfer $storage $backpack _item 1>>
                <<set _outItem.push('+ ' + _item)>>
            <<elseif $backpack.has(_item)>>
                <<set _outItem.push('± ' + _item)>>
            <<else>>
                <<set _outItem.push('-' + _item)>>
            <</if>>
        <</for>>
    <</if>>
    <<if (_outItem ?? []).length > 0>>
         <<set _outputAutoList.push('You: ' + _outItem.join(' | '))>>
    <</if>> 
    <<unset _outItem, _item>>
<</if>>
